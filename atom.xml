<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[kellen.piffner.com]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://kellen.piffner.com/"/>
  <updated>2016-01-06T19:15:24.332Z</updated>
  <id>http://kellen.piffner.com/</id>
  
  <author>
    <name><![CDATA[Kellen Piffner]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Introducing PingPongr]]></title>
    <link href="http://kellen.piffner.com/2016/01/06/PingPongr/"/>
    <id>http://kellen.piffner.com/2016/01/06/PingPongr/</id>
    <published>2016-01-06T18:00:00.000Z</published>
    <updated>2016-01-06T19:14:43.698Z</updated>
    <content type="html"><![CDATA[<p>Over the break, I wanted to build a quick nutrition web app.</p>
<p>My normal go-to framework for web applications is <a href="https://github.com/NancyFx/Nancy" target="_blank">Nancy</a>.  It&#39;s pretty lean and easy to get going, but... lately it&#39;s been feeling rather heavy.  It has a lot of features I never use (razor views, for instance), and I end up building out a good bit of bootstrap code to turn it all off and manually configure the bits I want.</p>
<p>So... what to do...</p>
<h2 id="mediatr">MediatR</h2>
<p>Recently, I discovered <a href="https://github.com/jbogard/MediatR" target="_blank">MediatR</a>.  At its simplest, it sends a request through a handler that returns a response.</p>
<figure class="highlight C#"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> Ping : IRequest&lt;<span class="keyword">string</span>&gt; { }

<span class="keyword">public</span> <span class="keyword">class</span> PingHandler : IRequestHandler&lt;Ping, <span class="keyword">string</span>&gt; {
    <span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Handle</span>(Ping request) {
        <span class="keyword">return</span> <span class="string">"Pong"</span>;
    }
}
</pre></td></tr></table></figure>

<p>You use the above handler like so:</p>
<figure class="highlight C#"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="keyword">var</span> pong = mediator.Send(<span class="keyword">new</span> Ping());  <span class="comment">//returns "Pong"</span>
</pre></td></tr></table></figure>

<p>What&#39;s interesting about MediatR is all the configuration magic happens at your IoC container.  Handlers are generated by the container, injecting any dependencies.  The request and response objects never have to know anything about the handler in-between.</p>
<p>And infrastructure and other concerns can be moved to decorators that your original code never has to know about:</p>
<figure class="highlight C#"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> LoggingDecorator&lt;TRequest, TResponse&gt;
    : IRequestHandler&lt;TRequest, TResponse&gt;
    <span class="keyword">where</span> TRequest : IRequest&lt;TResponse&gt;
{
    IRequestHandler&lt;TRequest, TResponse&gt; inner;
    <span class="keyword">public</span> <span class="title">LoggingDecorator</span>(IRouteRequestHandler&lt;TRequest, TResponse&gt; inner)
    {
        <span class="keyword">this</span>.inner = inner;
    }

    <span class="keyword">public</span> TResponse <span class="title">Handle</span>(TRequest message)
    {
        <span class="keyword">var</span> sw = Stopwatch.StartNew();
        <span class="keyword">var</span> results = <span class="keyword">this</span>.inner.Handle(message, cancellationToken);
        sw.Stop();

        Console.WriteLine(String.Format(<span class="string">"Processed {0} in {1}ms"</span>, message.ToString(), sw.ElapsedMilliseconds));

        <span class="keyword">return</span> results;
    }
}
</pre></td></tr></table></figure>

<p>Handlers like the above LoggingDecorator can &#39;decorate&#39; handlers, wrapping them  for all sorts of things - validations, logging, authorizations, etc.</p>
<p>I won&#39;t go much more into this, but check out Jimmy Bogard&#39;s blog post  <a href="https://lostechies.com/jimmybogard/2014/09/09/tackling-cross-cutting-concerns-with-a-mediator-pipeline/" target="_blank">&quot;Tackling cross-cutting concerns with a mediator pipeline&quot;</a> for more information on using this pattern.</p>
<h2 id="owin">Owin</h2>
<p>After using MediatR for a bit, I realized that it covered the majority of what I wanted a web framework to do.  It sent requests, handled them, and returned responses.  It was just missing the &#39;web&#39; part.  How hard could it be, right?  Surprisingly, it turns out to be not really all that hard.</p>
<p>You&#39;ve probably heard of &quot;Owin&quot;, but might not know anything about it other than it&#39;s &#39;the next thing!&#39; or slightly more useful, it&#39;s an <a href="http://owin.org/" target="_blank">&quot;Open Web Interface for .NET&quot;</a>.</p>
<p>If you&#39;ve worked with nodejs for a web app, you&#39;re probably familiar with their middleware layers.  It allows you to process an HTTP request through a pipeline,  where each &#39;layer&#39; can do whatever it needs to with the request - respond, log, etc. - all in a standardized way.  Owin brings that to .NET.  And combined with  async/await, it&#39;s quite easy to create your own middleware.</p>
<p>The quickest way to get going with Owin is to use the Microsoft&#39;s Owin nuget packages.  They provide a light layer on top of the base Owin requests api and server packages.  Here&#39;s an empty, self hosted web server:</p>
<figure class="highlight C#"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="keyword">using</span> Owin;
<span class="keyword">using</span> System;

<span class="keyword">public</span> <span class="keyword">class</span> Program
{
    <span class="keyword">public</span> <span class="keyword">class</span> Startup
    {
        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configuration</span>(IAppBuilder app)
        {
        }
    }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="keyword">string</span>[] args)
    {
        <span class="keyword">var</span> url = <span class="string">"http://localhost:12345"</span>;

        <span class="keyword">using</span> (Microsoft.Owin.Hosting.WebApp.Start&lt;Startup&gt;(url))
        {
            Console.WriteLine(<span class="string">"Listening at "</span> + url);
            Console.ReadLine();
        }
    }
}
</pre></td></tr></table></figure>

<p>If you run this example, you&#39;ll see it doesn&#39;t really do anything.  Any request you run against the server will just come back 404 not found.</p>
<p>So, let&#39;s add something to the Configuration function:</p>
<figure class="highlight C#"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>app.Use<span class="function"><span class="params">(async (context, next) =&gt;
{
   Console.WriteLine(<span class="string">"Something is happening!"</span>);
   await next();
})</span>;</span>
</pre></td></tr></table></figure>

<p>Now if you run the example and request something against the server, you&#39;ll still get 404, but you&#39;ll also get that console message.  You&#39;ve successfully created your first Owin middleware!</p>
<p>So... what&#39;s going on?</p>
<p>The app.Use call is defining an async function that runs when a request comes in.  Each request will go through that function.  You can have multiple &#39;Use&#39; functions that are called in order when a request comes in, with each one calling the &quot;next()&quot; function in the pipeline.  The context passed contains the information about the request - the headers, the content and response streams - all the normal things you&#39;d expect from a web request.</p>
<p>Let&#39;s add another, more complicated middleware that actually does something:</p>
<figure class="highlight C#"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>app.Use<span class="function"><span class="params">(async (context, next) =&gt;
{
    <span class="keyword">if</span> (context.Request.Path.StartsWithSegments(<span class="keyword">new</span> PathString(<span class="string">"/hello"</span>)))
    {
        using (<span class="reserved">var</span> writer = <span class="keyword">new</span> System.IO.StreamWriter(context.Response.Body))
        {
            await writer.WriteLineAsync(<span class="string">"Hello!"</span>);
        }
        context.Response.StatusCode = <span class="number">200</span>;
    }
    await next();
})</span>;</span>
</pre></td></tr></table></figure>

<p>If you load up &quot;/hello&quot; in a browser, you should now see &quot;Hello!&quot;, while you&#39;ll still see your earlier console message.</p>
<h2 id="pingpongr">PingPongr</h2>
<p>That brings me to <a href="https://github.com/decoy/PingPongr" target="_blank">PingPongr</a>, the product of all this discovery.</p>
<p>The PingPongr nuget package has only one dependency: the core Owin package.</p>
<p>Here&#39;s an example API that should look pretty familiar after seeing the earlier mediator code:</p>
<figure class="highlight C#"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="keyword">using</span> PingPongr;
<span class="keyword">using</span> System.Threading;
<span class="keyword">using</span> System.Threading.Tasks;

<span class="comment">//A request is unique per route</span>
<span class="keyword">public</span> <span class="keyword">class</span> Ping : IRouteRequest&lt;Pong&gt;
{
    <span class="keyword">public</span> <span class="keyword">string</span> Hi { <span class="keyword">get</span>; <span class="keyword">set</span>; }
}

<span class="comment">//responses can be shared between routes</span>
<span class="keyword">public</span> <span class="keyword">class</span> Pong
{
    <span class="keyword">public</span> <span class="keyword">string</span> Reply { <span class="keyword">get</span>; <span class="keyword">set</span>; }
}

<span class="keyword">public</span> <span class="keyword">class</span> PingHandler : IRouteRequestHandler&lt;Ping, Pong&gt;
{
    <span class="keyword">public</span> <span class="keyword">async</span> Task&lt;Pong&gt; <span class="title">Handle</span>(Ping message, CancellationToken cancellationToken)
    {
        <span class="keyword">return</span> <span class="keyword">await</span> DoSomethingCoolAsync();
    }
}
</pre></td></tr></table></figure>

<p>And finally, a functional, self hosted example using SimpleInjector for the container.</p>
<figure class="highlight C#"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="code"><pre><span class="keyword">using</span> Owin;
<span class="keyword">using</span> PingPongr;
<span class="keyword">using</span> PingPongr.OwinSupport;
<span class="keyword">using</span> SimpleInjector;
<span class="keyword">using</span> System;

<span class="keyword">public</span> <span class="keyword">class</span> Program
{
    <span class="keyword">public</span> <span class="keyword">class</span> Startup
    {
        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configuration</span>(IAppBuilder app)
        {
            <span class="comment">//setup the container</span>
            <span class="keyword">var</span> container = <span class="keyword">new</span> Container();
            <span class="keyword">var</span> assemblies = <span class="keyword">new</span>[] { <span class="keyword">typeof</span>(Program).Assembly };

            <span class="comment">//register all the route request handlers</span>
            container.Register(<span class="keyword">typeof</span>(IRouteRequestHandler&lt;,&gt;), assemblies);

            container.Verify();

            <span class="comment">//an instance factory is how request handlers are built from the container.</span>
            <span class="keyword">var</span> factory = <span class="keyword">new</span> InstanceFactory(container.GetInstance);

            <span class="comment">//the lib comes with a json media handler built with SimpleJson</span>
            <span class="keyword">var</span> mediaHandlers = <span class="keyword">new</span>[] { <span class="keyword">new</span> DefaultJsonMediaHandler() };

            <span class="comment">//the routes are found using reflection via the RouteBuilder</span>
            <span class="keyword">var</span> routes = RouteBuilder.WithAssemblies(assemblies).GetRoutes();
            <span class="keyword">foreach</span> (<span class="keyword">var</span> r <span class="keyword">in</span> routes) Console.WriteLine(r.Path);

            <span class="comment">//setup the PingPongr router</span>
            <span class="comment">//(Note: we're setting this up manually, but it could be created by the container)</span>
            IRouter router = <span class="keyword">new</span> Router(
                routes,
                mediaHandlers,
                factory
                );

            app.UsePingPongr(router);
        }
    }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="keyword">string</span>[] args)
    {
        <span class="keyword">using</span> (Microsoft.Owin.Hosting.WebApp.Start&lt;Startup&gt;(<span class="string">"http://localhost:12345"</span>))
        {
            Console.ReadLine();
        }
    }
}
</pre></td></tr></table></figure>

<p>A few things to note:</p>
<ul>
<li>The InstanceFactory works exactly like MediatR&#39;s SingleInstanceFactory, so the container examples from the MediatR project can be used directly.</li>
<li>The RouteBuilder object does a bit of reflection to discover possible routes (IRouteRequests) and cache them for use in the router.</li>
<li>Any HTTP method is accepted on a matching route.  Route matching is strictly by the path.</li>
<li>All handlers are async.  Welcome to the future ;).</li>
</ul>
<p>Over all, the library ended up quite lean and an easy read if you&#39;re curious about the inner workings.  The Tests and Sandbox example projects should also help.</p>
<h4 id="future">Future</h4>
<p>The package is still currently marked as pre-release until it&#39;s seen some real world use.  At the very least, the default JSON implementation needs some tweaks to check a broader range of request media types.</p>
<p>At some point I&#39;d also like to build a standard TCP/IP server for the library as an alternative to Owin making the library even more useful for inter-process communication for micro-services.</p>
<p>My hope is to keep the core library very lean, though.  The less it&#39;s doing, with the least amount of magic, the more maintainable it is for me (and you) to use in projects in the long run.</p>
<p>Oh, also in the future, I hope to complete that nutrition app I talked about...</p>
]]></content>
    
    
      <category term="web" scheme="http://kellen.piffner.com/tags/web/"/>
    
      <category term="PingPongr" scheme="http://kellen.piffner.com/tags/PingPongr/"/>
    
      <category term="Owin" scheme="http://kellen.piffner.com/tags/Owin/"/>
    
      <category term="DotNet" scheme="http://kellen.piffner.com/tags/DotNet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[I Broke Subversion]]></title>
    <link href="http://kellen.piffner.com/2014/03/08/i-broke-svn/"/>
    <id>http://kellen.piffner.com/2014/03/08/i-broke-svn/</id>
    <published>2014-03-08T22:48:06.000Z</published>
    <updated>2016-01-06T06:41:18.459Z</updated>
    <content type="html"><![CDATA[<p>This week I accidentally broke SVN.  Or, more appropriately, SVN broke me.</p>
<p>We recently moved a folder from a project to a shared location and setup an <a href="http://svnbook.red-bean.com/en/1.0/ch07s03.html" target="_blank">svn external</a> to point to this new location.</p>
<p>Steps taken:</p>
<ul>
<li>Make a copy of <code>trunk\ProjectA\ui</code> to <code>trunk\ui</code></li>
<li>Delete <code>trunk\ProjectA\ui</code></li>
<li>Add external to <code>trunk\ProjectA\ui</code> for <code>..\ui</code></li>
</ul>
<p>There were some other steps in the middle of all of that, but that&#39;s the short version.</p>
<p>Everything worked fine until we needed to switch back to a branch that was not sharing the folder.  What resulted was something of a mess.  I&#39;m not the first person to notice this problem, and you can see another post about it here: <a href="http://samwilson.id.au/2011/12/28/svn/" target="_blank">http://samwilson.id.au/2011/12/28/svn/</a>.</p>
<p>And here&#39;s a quick script to recreate the problem, including the workaround at the bottom:</p>
<script src="https://gist.github.com/decoy/596c8d5afd7217ddaacd.js"></script>

<h2 id="tortoise-svn-cleanup">Tortoise SVN Cleanup</h2>
<p>I&#39;m a big fan of Tortoise&#39;s cleanup options.  I go through this dialog every time I get ready to do a merge, just to make sure the workspace is as clean as it can get without checking out a fresh copy.</p>
<img src="/img/tsvn_cleanup.png" title="Clean all the things">


<p>Unfortunately, running the cleanup with those options and then switching resulted in this...</p>
<img src="/img/tsvn_switch_error.png" title="Break all the things">


<p>I couldn&#39;t recreate this exact error from the command line, so I&#39;m not sure if it&#39;s a Tortoise specific, or just something odd with the way it does the cleanup.  My best guess is that the cleanup removed the externals folders until you run the next update, and the switch did not like that...</p>
<h2 id="conclusion">Conclusion</h2>
<p>So I threw in the towel on this one.  The &quot;ui&quot; folder was renamed to &quot;lib&quot; and everything is happy.  The problems experienced above are entirely due to the external replacing a folder of the same name.</p>
<p>Otherwise, I&#39;ve found SVN Externals to be a good fit for our need at this point.  A couple of things to keep in mind, though:</p>
<ul>
<li>Commits including externals are not atomic.  (The external commit will happen separately from the rest of the commit.)</li>
<li>If you peg a relative path to a revision you will likely get errors about that folder not existing.  (../lib at revision 455 will not exist on a branch that was just created in revision 502, for example.)</li>
</ul>
]]></content>
    
    
      <category term="svn" scheme="http://kellen.piffner.com/tags/svn/"/>
    
      <category term="development" scheme="http://kellen.piffner.com/tags/development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Monty Hall Puzzle]]></title>
    <link href="http://kellen.piffner.com/2014/02/22/monty-hall-puzzle/"/>
    <id>http://kellen.piffner.com/2014/02/22/monty-hall-puzzle/</id>
    <published>2014-02-22T18:33:03.000Z</published>
    <updated>2016-01-06T06:41:18.457Z</updated>
    <content type="html"><![CDATA[<p>Wikipedia has an excellent article on the “probability puzzle” know as the Monty Hall problem.  </p>
<blockquote>
<p><a href="http://en.wikipedia.org/wiki/Monty_Hall_problem" target="_blank">http://en.wikipedia.org/wiki/Monty_Hall_problem</a></p>
</blockquote>
<p>It’s based around the concept of a game show where a contestant must pick one of three doors.  Behind one of the doors is the prize.  When the contestant picks the door, the host opens one of the other doors that doesn’t have the prize and then asks the contestant if they want to switch their choice.  The question: Do you switch or not? </p>
<blockquote>
<img src="/img/montyhall1.png" title="Goat">


</blockquote>
<p>At first, most people guess that it doesn’t matter.  There are two closed doors, so your chance must be 1:2 to guess correctly, right?  The correct answer:  You should always switch.</p>
<h2 id="simulation">Simulation</h2>
<p>For some reason, instead of reading through the rest of the Wikipedia article, I decided I needed to recreate this simulation in javascript (of course), so you can play along.</p>
<p>First, here’s the game. It will track when you switch doors and when you don’t and spit out your winning stats.  You can also press the &quot;Simulate&quot; button to automatically &quot;play&quot; the game so you can see the odds of winning for yourself.</p>
<p>Try it yourself:</p>
<p><p data-height="550" data-theme-id="4105" data-slug-hash="qdkFp" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/decoyahoy/pen/qdkFp'>Monty Hall Problem simulator</a> by kp (<a href='http://codepen.io/decoyahoy'>@decoyahoy</a>) on <a href='http://codepen.io'>CodePen</a>.</p></p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<p>You can see that when simulating play, the odds roughly come out to be 1:3 when staying, and 2:3 when switching doors.</p>
<img src="/img/montyhall2.png" >


<h2 id="different-way-of-thinking">Different way of thinking</h2>
<p>For me, breaking a concept down in order to turn it into a program often helps me see that concept differently.</p>
<p>In this case, after building the program I realized that you can think of the switch as getting to pick two doors instead of just the one.  You’re picking the door you <em>don’t</em> want to open.</p>
<p>You can enable that behavior instead by choosing the game mode &quot;Open Others&quot; at the bottom.  Every play is the equivalent of “open both doors that aren’t this one.”  You can also flip the switch to &quot;Open Selected&quot; to change the behavior to the opposite: where the door you pick is the one that’s opened.</p>
<p>You can also change the number of total doors.  If you set it to something like 20 (where your odds are now 1:20 for staying and 19:20 for switching) it might help visualize the what&#39;s going on here.  Here&#39;s a quote from Marilyn vos Savant from that Wikipedia article.</p>
<blockquote>
<p>Yes; you should switch. The first door has a 1/3 chance of winning, but the second door has a 2/3 chance. Here&#39;s a good way to visualize what happened. Suppose there are a million doors, and you pick door #1. Then the host, who knows what&#39;s behind the doors and will always avoid the one with the prize, opens them all except door #777,777. You&#39;d switch to that door pretty fast, wouldn&#39;t you?</p>
</blockquote>
<h2 id="conclusion">Conclusion</h2>
<p>There are many other simulations of this puzzle out there (and youtube videos, articles, dance interpretations, etc...), but hopefully the code sample is useful to someone, or someone learned something new.</p>
<p>For me, it was a fun way to spend a few hours playing with <a href="http://codepen.io" target="_blank">http://codepen.io</a> trying to make a ‘door’ animation in CSS.</p>
<p>One thing to note: I wrote the front end in <a href="http://angularjs.org/ Angularj" target="_blank">AngularJS</a>.  I&#39;ll blog about that more later, but using the framework easily halved the code necessary to display the UI.</p>
<p>For some more reading about the css doors:
<a href="http://24ways.org/2010/intro-to-css-3d-transforms/" target="_blank">http://24ways.org/2010/intro-to-css-3d-transforms/</a></p>
<p>Cheers!</p>
]]></content>
    
    
      <category term="javascript" scheme="http://kellen.piffner.com/tags/javascript/"/>
    
      <category term="css3" scheme="http://kellen.piffner.com/tags/css3/"/>
    
      <category term="angularjs" scheme="http://kellen.piffner.com/tags/angularjs/"/>
    
      <category term="web" scheme="http://kellen.piffner.com/tags/web/"/>
    
      <category term="codepen" scheme="http://kellen.piffner.com/tags/codepen/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Basic Animation]]></title>
    <link href="http://kellen.piffner.com/2014/01/31/basic-animation/"/>
    <id>http://kellen.piffner.com/2014/01/31/basic-animation/</id>
    <published>2014-02-01T03:52:32.000Z</published>
    <updated>2016-01-06T06:41:18.450Z</updated>
    <content type="html"><![CDATA[<p>In my day job, I spend a lot of time coding core business logic applications.  What do you do with data A in situation B kind of logic.  So when I work on something code related in my off time, I like to putz with technologies outside of that bubble.</p>
<p>With that in mind, I&#39;m going to talk about animation.</p>
<h2 id="old-school">Old School</h2>
<p>Back in &quot;the day&quot;, many games just updated as fast as the CPU could.  If you loaded the same game on a faster computer, everything would move faster.  This could result in fun times likes a typing game where the game&#39;s &quot;40 words per minute&quot; was closer to 120. (I regularly scored 14!)</p>
<p>You can end up with this same problem by being &#39;frame rate dependent&#39; with your animations.  Basically, this means that you update the position of your objects at the same time that you draw the object.</p>
<p>Here&#39;s an example running 10fps, 30fps, and 60fps while drawing a simple animation:</p>
<p><p data-height="175" data-theme-id="4105" data-slug-hash="LHgbm" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/decoyahoy/pen/LHgbm'>frame based animation</a> by kp (<a href='http://codepen.io/decoyahoy'>@decoyahoy</a>) on <a href='http://codepen.io'>CodePen</a>.</p></p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<p>The ball object handles the &#39;bounce&#39; effect.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">Ball</span><span class="params">(w, h)</span> {</span>

  <span class="comment">//let's just set this to 10 for now</span>
  <span class="keyword">this</span>.size = <span class="number">10</span>;

  <span class="comment">//initial ball positions</span>
  <span class="keyword">this</span>.x = <span class="number">0</span>;
  <span class="keyword">this</span>.y = <span class="number">0</span>;

  <span class="comment">//this is the expected change per direction per update</span>
  <span class="keyword">this</span>.dx = <span class="number">0.3</span>;
  <span class="keyword">this</span>.dy = <span class="number">2.75</span>;

  <span class="comment">//bounding box (can't escape)</span>
  <span class="keyword">this</span>.w = w;
  <span class="keyword">this</span>.h = h;
};

Ball.prototype.update = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="comment">//update the ball position</span>
  <span class="keyword">this</span>.x += <span class="keyword">this</span>.dx;
  <span class="keyword">this</span>.y += <span class="keyword">this</span>.dy;

  <span class="comment">//check to see if the ball is still in bounds</span>
  <span class="comment">//if it's not, change its direction to the opposite</span>
  <span class="keyword">if</span> (<span class="keyword">this</span>.x &lt;= <span class="number">0</span> || <span class="keyword">this</span>.x &gt;= <span class="keyword">this</span>.w - <span class="keyword">this</span>.size)
    <span class="keyword">this</span>.dx = -<span class="keyword">this</span>.dx;

  <span class="keyword">if</span> (<span class="keyword">this</span>.y &lt;= <span class="number">0</span> || <span class="keyword">this</span>.y &gt;= <span class="keyword">this</span>.h - <span class="keyword">this</span>.size)
    <span class="keyword">this</span>.dy = -<span class="keyword">this</span>.dy; 
};

Ball.prototype.draw = <span class="function"><span class="keyword">function</span><span class="params">(ctx)</span> {</span>
  <span class="comment">//let's draw the ball (box) </span>
  ctx.fillRect(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="number">10</span>, <span class="number">10</span>);
};
</pre></td></tr></table></figure>

<p>In our main draw loop you can see us updating both the ball position, and then telling it to draw.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre>BallCanvas.prototype.animate = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
  
  <span class="comment">//clear the canvas between frames</span>
  <span class="keyword">this</span>.ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);

  <span class="comment">//update the ball position</span>
  <span class="keyword">this</span>.ball.update();

  <span class="comment">//now draw the ball</span>
  <span class="keyword">this</span>.ball.draw(<span class="keyword">this</span>.ctx);

  <span class="comment">//restart the loop after we're done updating</span>
  <span class="keyword">this</span>.start();
};

BallCanvas.prototype.start = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
  <span class="comment">//we're forcing very specific framerates here</span>
  <span class="comment">//there are better ways...</span>
  <span class="keyword">var</span> that = <span class="keyword">this</span>;
  window.setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span> that.animate() }, <span class="keyword">this</span>.frameRate);
};
</pre></td></tr></table></figure>

<h2 id="better-ways">Better ways</h2>
<p>So what other options are there?  Well, you could calculate the distance the ball travels per frame by using math.  (Yay, math!)  </p>
<p>Let&#39;s assume we want the ball to update position every 10ms (100fps from the previous example).  Instead of simply updating the ball +1 on each frame, we now get the time, compare it to the previous time, and figure out how many times the ball should have moved since the last time we updated.</p>
<p>This is the new animate function:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="code"><pre>BallCanvas.prototype.animate = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>

  <span class="comment">//get the current time</span>
  <span class="keyword">var</span> nextUpdate =  <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();

  <span class="comment">//how much time has passed (cummulative)</span>
  <span class="keyword">this</span>.elapsed += nextUpdate - <span class="keyword">this</span>.lastUpdate;

  <span class="comment">//how many updates do we need to process?</span>
  <span class="comment">//this is a little more complex than need be</span>
  <span class="comment">//so the example can keep the balls in sync</span>
  <span class="keyword">while</span> (<span class="keyword">this</span>.elapsed &gt; UPDATE_RATE) {
    <span class="comment">//update the ball position</span>
    <span class="keyword">this</span>.ball.update();
    <span class="comment">//keep track of the extra</span>
    <span class="keyword">this</span>.elapsed -= UPDATE_RATE;
  }

  <span class="comment">//clear the canvas between frames</span>
  <span class="keyword">this</span>.ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);

  <span class="comment">//now draw the ball</span>
  <span class="keyword">this</span>.ball.draw(<span class="keyword">this</span>.ctx);
  
  <span class="comment">//update the update time</span>
  <span class="keyword">this</span>.lastUpdate = nextUpdate;

  <span class="comment">//restart the loop after we're done updating</span>
  <span class="keyword">this</span>.start();
};
</pre></td></tr></table></figure>

<p>And this is it running:</p>
<p><p data-height="175" data-theme-id="4105" data-slug-hash="gImtA" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/decoyahoy/pen/gImtA'>frame based animation</a> by kp (<a href='http://codepen.io/decoyahoy'>@decoyahoy</a>) on <a href='http://codepen.io'>CodePen</a>.</p></p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<p>Now, the side of me that spends all day separating business logic from infrastructure code keeps asking why I&#39;m calculating positions inside of a draw loop.  Separation of concerns is a big deal in large software projects. This brings me to the next option: have a loop just for updating.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>BallCanvas.prototype.animate = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>

  <span class="comment">//clear the canvas between frames</span>
  <span class="keyword">this</span>.ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);

  <span class="comment">//now draw the ball</span>
  <span class="keyword">this</span>.ball.draw(<span class="keyword">this</span>.ctx);

  <span class="comment">//restart the loop after we're done updating</span>
  <span class="keyword">this</span>.start();
};
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">//handle the object updates separate from drawing</span>
<span class="function"><span class="keyword">function</span> <span class="title">updateBalls</span><span class="params">()</span> {</span>
  ball10.ball.update();
  ball30.ball.update();
  ball60.ball.update();
  setTimeout(updateBalls, UPDATE_RATE);
}
</pre></td></tr></table></figure>

<p><p data-height="175" data-theme-id="4105" data-slug-hash="BfCnq" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/decoyahoy/pen/BfCnq'>update loop separate from draw loops</a> by kp (<a href='http://codepen.io/decoyahoy'>@decoyahoy</a>) on <a href='http://codepen.io'>CodePen</a>.</p></p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<p>The same results, but note the math is gone, and the code is overall simpler.  This also leads to a more useful scenario of handling user input in a way where we don&#39;t have to care what&#39;s happening with the draw loop.  How about we watch the mouse cursor?</p>
<p><p data-height="175" data-theme-id="4105" data-slug-hash="daIus" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/decoyahoy/pen/daIus'>follow the mouse</a> by kp (<a href='http://codepen.io/decoyahoy'>@decoyahoy</a>) on <a href='http://codepen.io'>CodePen</a>.</p></p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<p>Neat!  All we did was replace our update loop from the previous example with this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">onMouseMove</span><span class="params">(e)</span> {</span>

  <span class="comment">//get the new positions</span>
  <span class="keyword">var</span> x = e.clientX;
  <span class="keyword">var</span> y = e.clientY;

  ball10.ball.x = x;
  ball10.ball.y = y;
  ball30.ball.x = x;
  ball30.ball.y = y;
  ball60.ball.x = x;
  ball60.ball.y = y;
}

<span class="comment">//watch the mouse event</span>
document.onmousemove = onMouseMove;
</pre></td></tr></table></figure>

<h2 id="cautions">Cautions</h2>
<p>In these examples, I&#39;m using setTimeout to simulate my framerates.  Don&#39;t do this.  <code>requestAnimationFrame</code> is where it&#39;s at.</p>
<p>An excellent article on the subject:
<a href="http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/" target="_blank">http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/</a></p>
<p>Also, there are a lot of very good javascript animations libraries out there.  They have excellent framerate handling that can properly use the above requestAnimationFrame, throttle framerates on slow computers, or speed them up on fast ones.  Don&#39;t reinvent the wheel if you don&#39;t need to!</p>
]]></content>
    
    
      <category term="javascript" scheme="http://kellen.piffner.com/tags/javascript/"/>
    
      <category term="web" scheme="http://kellen.piffner.com/tags/web/"/>
    
      <category term="codepen" scheme="http://kellen.piffner.com/tags/codepen/"/>
    
      <category term="animation" scheme="http://kellen.piffner.com/tags/animation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Typescript and Visual Studio]]></title>
    <link href="http://kellen.piffner.com/2014/01/18/typescript-and-visual-studio/"/>
    <id>http://kellen.piffner.com/2014/01/18/typescript-and-visual-studio/</id>
    <published>2014-01-19T04:26:35.000Z</published>
    <updated>2016-01-06T06:41:18.447Z</updated>
    <content type="html"><![CDATA[<p>First:  I&#39;m a C# developer by day.  I spend a lot of time in the Visual Studio IDE.  To me, coding outside of a full IDE feels like trying to write an email without spell check.  I spend a lot of time hunting down typos, or reading through documentation to figure out the format of particular functions.  (OK, so not exactly like writing an email.)  A good IDE provides the tools to make a lot of that much simpler. (See <a href="http://en.wikipedia.org/wiki/Intelligent_code_completion" target="_blank">Intellisense</a>.)</p>
<p>With that in mind: </p>
<blockquote>
<p><a href="http://www.typescriptlang.org" target="_blank">Typescript</a> is a language for application-scale JavaScript development. TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. Any browser. Any host. Any OS. Open Source.</p>
</blockquote>
<p>I really like typescript and the vision it has for the &#39;future&#39; of javascript.  It gives us a preview of the actual future of javascript in a way that can be used today.  (See the wikipedia article: <a href="http://en.wikipedia.org/wiki/TypeScript#ECMAScript_6_support" target="_blank">http://en.wikipedia.org/wiki/TypeScript#ECMAScript_6_support</a>).</p>
<p>And specifically, it gives us &#39;typing&#39;.  The typing is what allows your IDE to do advanced things like safely change the name of a function everywhere it&#39;s used in your code.  It allows you to start typing a method name and get the documentation and full list of parameters expected.  You would be amazed how much time it can save you when you don&#39;t have to open up the source code to a library to figure out how to use it.</p>
<h2 id="visual-studio">Visual Studio</h2>
<p>Typescript is developed by Microsoft.  Because of this, it has brilliant integration in Microsoft&#39;s Visual Studio.  (If you haven&#39;t used Typescript with Visual Studio in awhile, give it another shot.  A lot of the quirks have been worked out.)</p>
<p>If you&#39;ve used Visual Studio, working in typescript will feel pretty normal.  You&#39;ll create a class, instantiate it, type in <code>foo.</code> and get your expected list of methods.  </p>
<img src="/img/ts_intellisense.png" >


<p>Visual Studio has options to &quot;Compile on Save&quot; which means the compiled javascript is created as soon as you save the file, making it immediately available in your project.  At one point, this compile action was a little slow, and could cause a delay in your save &gt; refresh workflow.  This hasn&#39;t been the case in the newest versions.</p>
<p>By default, Visual Studio will even generate a map file for you that tells debuggers like Chrome how to line up the javascript file with the typescript file.  I&#39;ve actually found this particular feature in the Chrome browser to be annoying, and instead disable this option in the project settings. </p>
<img src="/img/ts_sourcemaps.png" >



<p>Why?  Well, this the feature exists to make it easier to &#39;debug&#39; your javascript, but when your typescript looks like this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="keyword">class</span> Greeter {
    element: HTMLElement;
    span: HTMLElement;
    timerToken: number;

    constructor(element: HTMLElement) {
        <span class="keyword">this</span>.element = element;
        <span class="keyword">this</span>.element.innerHTML += <span class="string">"The time is: "</span>;
        <span class="keyword">this</span>.span = document.createElement(<span class="string">'span'</span>);
        <span class="keyword">this</span>.element.appendChild(<span class="keyword">this</span>.span);
        <span class="keyword">this</span>.span.innerText = <span class="keyword">new</span> <span class="built_in">Date</span>().toUTCString();
    }

    start() {
        <span class="keyword">this</span>.timerToken = setInterval(() =&gt; <span class="keyword">this</span>.span.innerHTML = <span class="keyword">new</span> <span class="built_in">Date</span>().toUTCString(), <span class="number">500</span>);
    }

    stop() {
        clearTimeout(<span class="keyword">this</span>.timerToken);
    }

}
</pre></td></tr></table></figure>

<p>and your javascript output looks like this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="keyword">var</span> Greeter = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="function"><span class="keyword">function</span> <span class="title">Greeter</span><span class="params">(element)</span> {</span>
        <span class="keyword">this</span>.element = element;
        <span class="keyword">this</span>.element.innerHTML += <span class="string">"The time is: "</span>;
        <span class="keyword">this</span>.span = document.createElement(<span class="string">'span'</span>);
        <span class="keyword">this</span>.element.appendChild(<span class="keyword">this</span>.span);
        <span class="keyword">this</span>.span.innerText = <span class="keyword">new</span> <span class="built_in">Date</span>().toUTCString();
    }
    Greeter.prototype.start = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        <span class="keyword">var</span> _this = <span class="keyword">this</span>;
        <span class="keyword">this</span>.timerToken = setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
            <span class="keyword">return</span> _this.span.innerHTML = <span class="keyword">new</span> <span class="built_in">Date</span>().toUTCString();
        }, <span class="number">500</span>);
    };

    Greeter.prototype.stop = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        clearTimeout(<span class="keyword">this</span>.timerToken);
    };
    <span class="keyword">return</span> Greeter;
})();
</pre></td></tr></table></figure>

<p>It&#39;s not a big deal to debug....</p>
<p>Unlike <a href="http://www.dartlang.org" target="_blank">Dart</a> or <a href="http://coffeescript.org/" target="_blank">CoffeeScript</a>, there&#39;s no new language to learn.  It simply adds some nice &#39;extras&#39; to a language most of us are already familiar with. When you compile typescript it boils down to almost identical javascript, making it very easy to debug and work with in a live environment.</p>
<h3 id="future">Future</h3>
<p>The future of typescript is still pretty uncertain.  Microsoft&#39;s involvement with it has been both good and bad.  Good in that it&#39;s gotten the attention of a lot of Microsoft stack programmers and that it gives has corporate backing.  Bad in that Microsoft has never had a good reputation in the open source world...</p>
<p>My personal hope is that ECMA 6 will have all the features I&#39;ve learned to enjoy with typescript, and the problem will just go away.</p>
<p>In the meantime, enjoy this chart:</p>
<script type="text/javascript" src="//www.google.com/trends/embed.js?hl=en-US&q=typescript,+coffeescript&cmpt=q&content=1&cid=TIMESERIES_GRAPH_0&export=5&w=500&h=330"></script>


]]></content>
    
    
      <category term="typescript" scheme="http://kellen.piffner.com/tags/typescript/"/>
    
      <category term="javascript" scheme="http://kellen.piffner.com/tags/javascript/"/>
    
      <category term="microsoft" scheme="http://kellen.piffner.com/tags/microsoft/"/>
    
      <category term="visual studio" scheme="http://kellen.piffner.com/tags/visual%20studio/"/>
    
      <category term="web" scheme="http://kellen.piffner.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[New Blog]]></title>
    <link href="http://kellen.piffner.com/2014/01/17/new-blog/"/>
    <id>http://kellen.piffner.com/2014/01/17/new-blog/</id>
    <published>2014-01-18T06:29:28.000Z</published>
    <updated>2016-01-06T06:41:18.443Z</updated>
    <content type="html"><![CDATA[<p>Hello and welcome to the requisite &quot;New Blog&quot; post.  This is the first blog I&#39;ve set up in awhile, and the technologies used may be interesting to some.</p>
<h2 id="static-site">Static Site</h2>
<p>To keep hosting simple, this blog is entirely static html, CSS, and JavaScript.  The &quot;server&quot; is just any web server that can spit out static files.  This choice opened up options like hosting using <a href="http://pages.github.com/" target="_blank">GitHub Pages</a>, or even <a href="https://www.dropbox.com/" target="_blank">DropBox</a>. </p>
<p>While the site is static, I&#39;m not manually copying and pasting the header and footer to all the individual pages, or even writing in html.  I&#39;m using a &quot;static site generator&quot;.  The generator works a lot like a server would: it takes my original blog entry data and my site templates and glues it all together outputting html.  The difference between it and something like PHP, is it&#39;s only doing it <em>once</em>.</p>
<p>Now there are a surprising number of &quot;static site generators&quot; out there, so I didn&#39;t have to re-invent the wheel.  This blog is currently generated using <a href="http://zespia.tw/hexo/" target="_blank">Hexo</a> - &quot;A fast, simple &amp; powerful blog framework, powered by Node.js.&quot;  </p>
<h2 id="hexo">Hexo</h2>
<p>Hexo is built using <a href="http://nodejs.org/" target="_blank">Node.js</a>, a cross platform scripting engine that&#39;s ridiculously easy to deploy and has a rapidly expanding community.  </p>
<p>Hexo itself is fairly simple.  It takes <a href="http://daringfireball.net/projects/markdown/" target="_blank">Markdown</a> files - a simple plain text format - and outputs html using <a href="http://embeddedjs.com/" target="_blank">EJS</a> templates.  Because nodejs community has lots library options for converting markdown to html and parsing EJS templates, Hexo only has to manage the flow of the process, and doesn&#39;t have to deal with the complicated parsing problems.  It&#39;s fairly simple to create custom plugins that support things other than markdown and EJS as well.</p>
<p>Because of of this simplicity, if Hexo is ever abandoned (not uncommon for an open source app), it won&#39;t be too difficult to find or create a replacement.</p>
<h2 id="source-code">Source Code</h2>
<p>If you&#39;re interested in the site, feel free to check out the source code hosted up on github.</p>
<p><a href="https://github.com/decoy/blog" target="_blank">Source</a></p>
]]></content>
    
    
      <category term="hello world" scheme="http://kellen.piffner.com/tags/hello%20world/"/>
    
      <category term="blog" scheme="http://kellen.piffner.com/tags/blog/"/>
    
      <category term="hexo" scheme="http://kellen.piffner.com/tags/hexo/"/>
    
      <category term="nodejs" scheme="http://kellen.piffner.com/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://kellen.piffner.com/tags/javascript/"/>
    
      <category term="css" scheme="http://kellen.piffner.com/tags/css/"/>
    
      <category term="html" scheme="http://kellen.piffner.com/tags/html/"/>
    
  </entry>
  
</feed>
